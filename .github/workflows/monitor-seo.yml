name: Monitor SEO Files - Robots.txt & Sitemap.xml

on:
  schedule:
    - cron: '0 8,20 * * *'
  workflow_dispatch:

env:
  SITE_URL: 'https://www.leanature.com/'
  EMAIL_USERNAME: 'vbouvier.redactrice@gmail.com'
  EMAIL_PASSWORD: 'avrf enpz otim qlnf'
  NOTIFICATION_EMAIL: 'vbouvier@cybercite.fr'

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Setup directories
      run: |
        mkdir -p monitoring-data
        mkdir -p monitoring-history
        echo "‚úÖ Directories cr√©√©s"
    
    - name: Download current robots.txt
      id: download_robots
      run: |
        echo "üì• T√©l√©chargement de robots.txt..."
        ROBOTS_URL="${SITE_URL}robots.txt"
        
        HTTP_STATUS=$(curl -s -o monitoring-data/robots_current.txt -w "%{http_code}" "$ROBOTS_URL")
        echo "status=$HTTP_STATUS" >> $GITHUB_OUTPUT
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ robots.txt t√©l√©charg√© (HTTP $HTTP_STATUS)"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "Lignes: $(wc -l < monitoring-data/robots_current.txt)"
        else
          echo "‚ùå Erreur HTTP $HTTP_STATUS"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Download current sitemap.xml
      id: download_sitemap
      run: |
        echo "üì• T√©l√©chargement de sitemap.xml..."
        SITEMAP_URL="${SITE_URL}media/google_sitemap_3.xml"
        
        HTTP_STATUS=$(curl -s -o monitoring-data/sitemap_current.xml -w "%{http_code}" "$SITEMAP_URL")
        echo "status=$HTTP_STATUS" >> $GITHUB_OUTPUT
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ sitemap.xml t√©l√©charg√© (HTTP $HTTP_STATUS)"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "Taille: $(wc -c < monitoring-data/sitemap_current.xml) bytes"
        else
          echo "‚ùå Erreur HTTP $HTTP_STATUS"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore previous files from artifacts
      id: restore_previous
      uses: actions/download-artifact@v4
      with:
        name: monitoring-history
        path: monitoring-history/
      continue-on-error: true
    
    - name: Check for changes in robots.txt
      id: check_robots_changes
      if: steps.download_robots.outputs.success == 'true'
      run: |
        echo "üîç V√©rification des changements dans robots.txt..."
        
        if [ -f monitoring-history/robots_previous.txt ]; then
          if ! diff -q monitoring-history/robots_previous.txt monitoring-data/robots_current.txt > /dev/null 2>&1; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üìù Changements d√©tect√©s dans robots.txt!"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Aucun changement dans robots.txt"
          fi
        else
          echo "changed=new" >> $GITHUB_OUTPUT
          echo "üÜï Premi√®re v√©rification de robots.txt"
        fi
    
    - name: Check for changes in sitemap.xml
      id: check_sitemap_changes
      if: steps.download_sitemap.outputs.success == 'true'
      run: |
        echo "üîç V√©rification des changements dans sitemap.xml..."
        
        if [ -f monitoring-history/sitemap_previous.xml ]; then
          if ! diff -q monitoring-history/sitemap_previous.xml monitoring-data/sitemap_current.xml > /dev/null 2>&1; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "üìù Changements d√©tect√©s dans sitemap.xml!"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Aucun changement dans sitemap.xml"
          fi
        else
          echo "changed=new" >> $GITHUB_OUTPUT
          echo "üÜï Premi√®re v√©rification de sitemap.xml"
        fi
    
    - name: Send notification email - Test simple
      if: |
        steps.check_robots_changes.outputs.changed == 'new' ||
        steps.check_sitemap_changes.outputs.changed == 'new' ||
        steps.check_robots_changes.outputs.changed == 'true' ||
        steps.check_sitemap_changes.outputs.changed == 'true'
      run: |
        echo "üìß Envoi de l'email de notification..."
        
        python3 << 'PYTHON_SCRIPT'
        import smtplib
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        
        # Configuration
        sender = "${{ env.EMAIL_USERNAME }}"
        password = "${{ env.EMAIL_PASSWORD }}"
        receiver = "${{ env.NOTIFICATION_EMAIL }}"
        
        print(f"Configuration email:")
        print(f"  De: {sender}")
        print(f"  √Ä: {receiver}")
        
        # Cr√©er le message
        message = MIMEMultipart()
        message["Subject"] = "üìä Monitoring SEO - Rapport"
        message["From"] = sender
        message["To"] = receiver
        
        # Corps du message
        robots_status = "${{ steps.check_robots_changes.outputs.changed }}"
        sitemap_status = "${{ steps.check_sitemap_changes.outputs.changed }}"
        
        html = f"""
        <html>
        <body style="font-family: Arial, sans-serif;">
            <h2>üìä Rapport de Monitoring SEO</h2>
            <p><strong>Site:</strong> ${{ env.SITE_URL }}</p>
            <p><strong>Date:</strong> {datetime.now().strftime("%d/%m/%Y %H:%M")}</p>
            
            <h3>ü§ñ robots.txt</h3>
            <p>Status: {robots_status}</p>
            
            <h3>üó∫Ô∏è sitemap.xml</h3>
            <p>Status: {sitemap_status}</p>
            
            <hr>
            <p style="color: #666; font-size: 0.9em;">
                Prochaine v√©rification dans 12 heures.<br>
                <a href="https://github.com/${{ github.repository }}/actions">Voir l'historique</a>
            </p>
        </body>
        </html>
        """
        
        message.attach(MIMEText(html, "html"))
        
        # Envoyer l'email
        try:
            print("Connexion au serveur SMTP...")
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            print("Authentification...")
            server.login(sender, password)
            print("Envoi de l'email...")
            server.sendmail(sender, receiver, message.as_string())
            server.quit()
            print("‚úÖ Email envoy√© avec succ√®s!")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            exit(1)
        PYTHON_SCRIPT
    
    - name: Save current files as history
      if: always()
      run: |
        echo "üíæ Sauvegarde des fichiers actuels..."
        
        if [ -f monitoring-data/robots_current.txt ]; then
          cp monitoring-data/robots_current.txt monitoring-history/robots_previous.txt
          echo "‚úÖ robots.txt sauvegard√©"
        fi
        
        if [ -f monitoring-data/sitemap_current.xml ]; then
          cp monitoring-data/sitemap_current.xml monitoring-history/sitemap_previous.xml
          echo "‚úÖ sitemap.xml sauvegard√©"
        fi
    
    - name: Upload history as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: monitoring-history
        path: monitoring-history/
        retention-days: 30
    
    - name: Create summary
      if: always()
      run: |
        echo "# üìä Monitoring SEO" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Site:** ${{ env.SITE_URL }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date '+%d/%m/%Y %H:%M')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## R√©sultats" >> $GITHUB_STEP_SUMMARY
        echo "- robots.txt: ${{ steps.check_robots_changes.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
        echo "- sitemap.xml: ${{ steps.check_sitemap_changes.outputs.changed }}" >> $GITHUB_STEP_SUMMARY
