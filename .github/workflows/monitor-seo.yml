name: Monitor SEO Multi-Sites

on:
  schedule:
    # Toutes les 12 heures (8h et 20h UTC)
    - cron: '0 8,20 * * *'
  workflow_dispatch:
    inputs:
      site_filter:
        description: 'Nom du site √† tester (vide = tous)'
        required: false
        default: ''

env:
  EMAIL_USERNAME: 'vbouvier.redactrice@gmail.com'
  EMAIL_PASSWORD: 'avrf enpz otim qlnf'
  NOTIFICATION_EMAIL: 'vbouvier@cybercite.fr'

jobs:
  # ========================================
  # CONFIGURATION DES SITES
  # ========================================
  setup:
    name: üìã Configuration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      sites_count: ${{ steps.set-matrix.outputs.count }}
    
    steps:
    - name: Configure sites matrix
      id: set-matrix
      run: |
        # Configuration compl√®te des 26 sites
        SITES_JSON=$(cat << 'EOF'
        {
          "sites": [
            {
              "name": "Brown Shipley",
              "url": "https://brownshipley.com/",
              "sitemaps": ["en-gb/sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Orange Caraibe",
              "url": "https://caraibe.orange.fr/",
              "sitemaps": ["sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Recrutement FHSJ",
              "url": "https://recrutement-fhsj.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "Assuropoil",
              "url": "https://www.assuropoil.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "Avoriaz",
              "url": "https://www.avoriaz.com/",
              "sitemaps": ["sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Domicile Clean",
              "url": "https://www.domicile-clean.fr/",
              "sitemaps": ["sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Espaces Atypiques",
              "url": "https://www.espaces-atypiques.com/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "Hopital Marie Lannelongue",
              "url": "https://www.hopitalmarielannelongue.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "HPSJ",
              "url": "https://www.hpsj.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "InsingerGilissen",
              "url": "https://www.insingergilissen.nl/",
              "sitemaps": ["nl-nl/sitemap.xml"],
              "enabled": true
            },
            {
              "name": "International Patient Paris",
              "url": "https://www.international-patient-paris.com/",
              "sitemaps": ["sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Le Voyage √† Nantes",
              "url": "https://www.levoyageanantes.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "Macoretz",
              "url": "https://www.macoretz.fr/",
              "sitemaps": ["sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Merck Finck",
              "url": "https://www.merckfinck.de/",
              "sitemaps": ["de-de/sitemap.xml"],
              "enabled": true
            },
            {
              "name": "NDBS",
              "url": "https://www.ndbs.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "Pharmapets BE",
              "url": "https://www.pharmapets.be/",
              "sitemaps": [
                "media/sitemaps/pharmapets_be/sitemap_nl_product.xml",
                "media/sitemaps/pharmapets_be/sitemap_fr_product.xml",
                "media/sitemaps/pharmapets_be/sitemap_nl_category.xml",
                "media/sitemaps/pharmapets_be/sitemap_fr_category.xml"
              ],
              "enabled": true
            },
            {
              "name": "Pharmapets NL",
              "url": "https://www.pharmapets.nl/",
              "sitemaps": [
                "media/sitemaps/pharmapets_nl/sitemap_product.xml",
                "media/sitemaps/pharmapets_nl/sitemap_category.xml"
              ],
              "enabled": true
            },
            {
              "name": "Puilaetco",
              "url": "https://www.puilaetco.be/",
              "sitemaps": ["fr-be/sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Quintet COM",
              "url": "https://www.quintet.com/",
              "sitemaps": ["en-gb/sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Quintet LU",
              "url": "https://www.quintet.lu/",
              "sitemaps": ["en-lu/sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Royan Atlantique",
              "url": "https://www.royanatlantique.fr/",
              "sitemaps": ["sitemap_index.xml"],
              "enabled": true
            },
            {
              "name": "Sayse",
              "url": "https://www.sayse.fr/",
              "sitemaps": ["sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Terre de Marins",
              "url": "https://www.terredemarins.fr/",
              "sitemaps": ["1_fr_0_sitemap.xml"],
              "enabled": true
            },
            {
              "name": "Tom & Co",
              "url": "https://www.tomandco.com/",
              "sitemaps": [
                "media/sitemaps/tomandco/sitemap_tc_benl_product.xml",
                "media/sitemaps/tomandco/sitemap_tc_befr_product.xml",
                "media/sitemaps/tomandco/sitemap_tc_frfr_product.xml"
              ],
              "enabled": true
            },
            {
              "name": "Vetostore",
              "url": "https://www.vetostore.com/",
              "sitemaps": [
                "media/sitemaps/vetostore/sitemap_product.xml",
                "media/sitemaps/vetostore/sitemap_category.xml"
              ],
              "enabled": true
            },
            {
              "name": "Lea Nature",
              "url": "https://www.leanature.com/",
              "sitemaps": ["media/google_sitemap_3.xml"],
              "enabled": true
            }
          ]
        }
        EOF
        )
        
        # Filtrer et pr√©parer la matrice
        if [ -n "${{ github.event.inputs.site_filter }}" ]; then
          FILTERED=$(echo "$SITES_JSON" | jq -c --arg filter "${{ github.event.inputs.site_filter }}" '.sites | map(select(.name | test($filter; "i")) | select(.enabled == true))')
        else
          FILTERED=$(echo "$SITES_JSON" | jq -c '.sites | map(select(.enabled == true))')
        fi
        
        # Cr√©er la matrice pour GitHub Actions
        echo "matrix={\"include\":$FILTERED}" >> $GITHUB_OUTPUT
        
        # Compter les sites
        COUNT=$(echo "$FILTERED" | jq '. | length')
        echo "count=$COUNT" >> $GITHUB_OUTPUT
        
        echo "üìä $COUNT sites configur√©s pour le monitoring"

  # ========================================
  # MONITORING PARALL√àLE
  # ========================================
  monitor:
    name: üîç ${{ matrix.name }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      max-parallel: 5
      fail-fast: false
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup
      id: setup
      run: |
        SAFE_NAME=$(echo "${{ matrix.name }}" | sed 's/[^a-zA-Z0-9]/_/g' | tr '[:upper:]' '[:lower:]')
        echo "SAFE_NAME=${SAFE_NAME}" >> $GITHUB_ENV
        mkdir -p "data/${SAFE_NAME}"
        mkdir -p "history/${SAFE_NAME}"
        echo "‚úÖ Dossiers cr√©√©s pour ${{ matrix.name }}"
    
    - name: Download robots.txt
      id: robots
      run: |
        URL="${{ matrix.url }}robots.txt"
        echo "üì• T√©l√©chargement: $URL"
        
        HTTP_STATUS=$(curl -s -o "data/${SAFE_NAME}/robots.txt" -w "%{http_code}" -L "$URL" --max-time 30)
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ robots.txt OK ($(wc -l < data/${SAFE_NAME}/robots.txt) lignes)"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Erreur HTTP $HTTP_STATUS"
          echo "status=error" >> $GITHUB_OUTPUT
          echo "error=HTTP $HTTP_STATUS" >> $GITHUB_OUTPUT
        fi
    
    - name: Download sitemaps
      id: sitemaps
      run: |
        echo "üì• T√©l√©chargement des sitemaps..."
        SITEMAP_STATUS="success"
        SITEMAP_ERRORS=""
        
        # Convertir la liste JSON en array bash
        SITEMAPS='${{ toJson(matrix.sitemaps) }}'
        echo "$SITEMAPS" | jq -r '.[]' | while IFS= read -r sitemap; do
          URL="${{ matrix.url }}${sitemap}"
          FILENAME=$(echo "$sitemap" | sed 's/\//_/g')
          
          echo "  ‚Üí $sitemap"
          HTTP_STATUS=$(curl -s -o "data/${SAFE_NAME}/sitemap_${FILENAME}" -w "%{http_code}" -L "$URL" --max-time 30)
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "    ‚ùå Erreur HTTP $HTTP_STATUS"
            SITEMAP_STATUS="error"
            SITEMAP_ERRORS="${SITEMAP_ERRORS}${sitemap}:HTTP${HTTP_STATUS};"
          else
            echo "    ‚úÖ OK ($(wc -c < data/${SAFE_NAME}/sitemap_${FILENAME}) bytes)"
          fi
        done
        
        echo "status=$SITEMAP_STATUS" >> $GITHUB_OUTPUT
        if [ -n "$SITEMAP_ERRORS" ]; then
          echo "errors=$SITEMAP_ERRORS" >> $GITHUB_OUTPUT
        fi
    
    - name: Restore history
      uses: actions/download-artifact@v4
      with:
        name: history-${{ env.SAFE_NAME }}
        path: history/${{ env.SAFE_NAME }}/
      continue-on-error: true
    
    - name: Check changes
      id: changes
      run: |
        CHANGES="none"
        DETAILS=""
        
        # V√©rifier robots.txt
        if [ -f "history/${SAFE_NAME}/robots.txt" ] && [ -f "data/${SAFE_NAME}/robots.txt" ]; then
          if ! diff -q "history/${SAFE_NAME}/robots.txt" "data/${SAFE_NAME}/robots.txt" > /dev/null; then
            CHANGES="detected"
            DETAILS="${DETAILS}robots.txt:modified;"
            echo "üìù Changements dans robots.txt"
          fi
        elif [ -f "data/${SAFE_NAME}/robots.txt" ]; then
          CHANGES="new"
          DETAILS="${DETAILS}robots.txt:new;"
        fi
        
        # V√©rifier chaque sitemap
        for sitemap_file in data/${SAFE_NAME}/sitemap_*; do
          if [ -f "$sitemap_file" ]; then
            BASENAME=$(basename "$sitemap_file")
            if [ -f "history/${SAFE_NAME}/$BASENAME" ]; then
              if ! diff -q "$sitemap_file" "history/${SAFE_NAME}/$BASENAME" > /dev/null; then
                CHANGES="detected"
                DETAILS="${DETAILS}${BASENAME}:modified;"
                echo "üìù Changements dans $BASENAME"
              fi
            else
              if [ "$CHANGES" == "none" ]; then
                CHANGES="new"
              fi
              DETAILS="${DETAILS}${BASENAME}:new;"
            fi
          fi
        done
        
        echo "status=$CHANGES" >> $GITHUB_OUTPUT
        echo "details=$DETAILS" >> $GITHUB_OUTPUT
    
    - name: Create report
      id: report
      run: |
        # G√©n√©rer le rapport JSON
        cat << EOF > "data/${SAFE_NAME}/report.json"
        {
          "site": "${{ matrix.name }}",
          "url": "${{ matrix.url }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "robots": {
            "status": "${{ steps.robots.outputs.status }}",
            "error": "${{ steps.robots.outputs.error }}"
          },
          "sitemaps": {
            "status": "${{ steps.sitemaps.outputs.status }}",
            "errors": "${{ steps.sitemaps.outputs.errors }}"
          },
          "changes": {
            "status": "${{ steps.changes.outputs.status }}",
            "details": "${{ steps.changes.outputs.details }}"
          }
        }
        EOF
        
        # D√©terminer si une alerte est n√©cessaire
        ALERT="false"
        if [ "${{ steps.robots.outputs.status }}" != "success" ] || \
           [ "${{ steps.sitemaps.outputs.status }}" != "success" ] || \
           [ "${{ steps.changes.outputs.status }}" != "none" ]; then
          ALERT="true"
        fi
        
        echo "alert=$ALERT" >> $GITHUB_OUTPUT
    
    - name: Save history
      if: always()
      run: |
        # Copier les fichiers actuels dans l'historique
        cp -f data/${SAFE_NAME}/* history/${SAFE_NAME}/ 2>/dev/null || true
    
    - name: Upload history
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: history-${{ env.SAFE_NAME }}
        path: history/${{ env.SAFE_NAME }}/
        retention-days: 30
    
    - name: Upload report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: report-${{ env.SAFE_NAME }}
        path: data/${{ env.SAFE_NAME }}/report.json

  # ========================================
  # CONSOLIDATION ET NOTIFICATION
  # ========================================
  notify:
    name: üìß Notification
    needs: [setup, monitor]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download reports
      uses: actions/download-artifact@v4
      with:
        pattern: report-*
        path: reports/
    
    - name: Analyze reports
      id: analyze
      run: |
        echo "üìä Analyse des rapports..."
        
        TOTAL_SITES="${{ needs.setup.outputs.sites_count }}"
        SITES_OK=0
        SITES_ERROR=0
        SITES_CHANGED=0
        ALERT_NEEDED=false
        
        # Cr√©er le rapport consolid√©
        echo "# üìä Rapport de Monitoring SEO" > summary.md
        echo "" >> summary.md
        echo "**Date:** $(date '+%d/%m/%Y %H:%M')" >> summary.md
        echo "**Sites surveill√©s:** $TOTAL_SITES" >> summary.md
        echo "" >> summary.md
        
        # Analyser chaque rapport
        for report_dir in reports/report-*; do
          if [ -f "$report_dir/report.json" ]; then
            REPORT=$(cat "$report_dir/report.json")
            
            SITE=$(echo "$REPORT" | jq -r '.site')
            URL=$(echo "$REPORT" | jq -r '.url')
            ROBOTS_STATUS=$(echo "$REPORT" | jq -r '.robots.status')
            SITEMAPS_STATUS=$(echo "$REPORT" | jq -r '.sitemaps.status')
            CHANGES_STATUS=$(echo "$REPORT" | jq -r '.changes.status')
            
            if [ "$ROBOTS_STATUS" = "error" ] || [ "$SITEMAPS_STATUS" = "error" ]; then
              SITES_ERROR=$((SITES_ERROR + 1))
              ALERT_NEEDED=true
              echo "## ‚ùå $SITE" >> summary.md
              echo "- URL: $URL" >> summary.md
              [ "$ROBOTS_STATUS" = "error" ] && echo "- robots.txt: Erreur" >> summary.md
              [ "$SITEMAPS_STATUS" = "error" ] && echo "- sitemaps: Erreur" >> summary.md
              echo "" >> summary.md
            elif [ "$CHANGES_STATUS" != "none" ]; then
              SITES_CHANGED=$((SITES_CHANGED + 1))
              ALERT_NEEDED=true
              echo "## üìù $SITE" >> summary.md
              echo "- URL: $URL" >> summary.md
              echo "- Changements d√©tect√©s" >> summary.md
              echo "" >> summary.md
            else
              SITES_OK=$((SITES_OK + 1))
            fi
          fi
        done
        
        echo "" >> summary.md
        echo "## üìà R√©sum√©" >> summary.md
        echo "- ‚úÖ Sites OK: $SITES_OK" >> summary.md
        echo "- üìù Sites modifi√©s: $SITES_CHANGED" >> summary.md
        echo "- ‚ùå Sites en erreur: $SITES_ERROR" >> summary.md
        
        cat summary.md >> $GITHUB_STEP_SUMMARY
        
        echo "sites_ok=$SITES_OK" >> $GITHUB_OUTPUT
        echo "sites_error=$SITES_ERROR" >> $GITHUB_OUTPUT
        echo "sites_changed=$SITES_CHANGED" >> $GITHUB_OUTPUT
        echo "alert_needed=$ALERT_NEEDED" >> $GITHUB_OUTPUT
    
    - name: Send email
      if: steps.analyze.outputs.alert_needed == 'true'
      run: |
        python3 << 'PYTHON'
        import smtplib
        import json
        import os
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        
        # Config
        sender = "${{ env.EMAIL_USERNAME }}"
        password = "${{ env.EMAIL_PASSWORD }}"
        receiver = "${{ env.NOTIFICATION_EMAIL }}"
        
        sites_ok = int("${{ steps.analyze.outputs.sites_ok }}")
        sites_error = int("${{ steps.analyze.outputs.sites_error }}")
        sites_changed = int("${{ steps.analyze.outputs.sites_changed }}")
        total_sites = int("${{ needs.setup.outputs.sites_count }}")
        
        # Sujet
        if sites_error > 0:
            subject = f"üö® SEO Alert - {sites_error} erreur(s) sur {total_sites} sites"
        else:
            subject = f"üìù SEO Update - {sites_changed} changement(s) sur {total_sites} sites"
        
        # Corps HTML
        html = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; }}
                .header {{ background: #f8f9fa; padding: 20px; border-radius: 5px; }}
                .summary {{ background: #e9ecef; padding: 15px; margin: 20px 0; border-radius: 5px; }}
                .site-error {{ border-left: 4px solid #dc3545; padding: 10px; margin: 10px 0; background: #f8d7da; }}
                .site-changed {{ border-left: 4px solid #ffc107; padding: 10px; margin: 10px 0; background: #fff3cd; }}
                .footer {{ margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d; font-size: 0.9em; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä Monitoring SEO - Rapport</h1>
                <p>Date: {datetime.now().strftime("%d/%m/%Y %H:%M")}</p>
            </div>
            
            <div class="summary">
                <h2>R√©sum√©</h2>
                <ul>
                    <li>‚úÖ Sites OK: {sites_ok}/{total_sites}</li>
                    <li>üìù Sites modifi√©s: {sites_changed}/{total_sites}</li>
                    <li>‚ùå Sites en erreur: {sites_error}/{total_sites}</li>
                </ul>
            </div>
        """
        
        # D√©tails des sites avec probl√®mes
        for report_dir in os.listdir("reports"):
            if report_dir.startswith("report-"):
                report_path = os.path.join("reports", report_dir, "report.json")
                if os.path.exists(report_path):
                    with open(report_path) as f:
                        report = json.load(f)
                    
                    if report['robots']['status'] == 'error' or report['sitemaps']['status'] == 'error':
                        html += f'<div class="site-error">'
                        html += f'<strong>‚ùå {report["site"]}</strong><br>'
                        html += f'URL: <a href="{report["url"]}">{report["url"]}</a><br>'
                        if report['robots']['status'] == 'error':
                            html += f'robots.txt: Erreur<br>'
                        if report['sitemaps']['status'] == 'error':
                            html += f'sitemaps: Erreur<br>'
                        html += '</div>'
                    elif report['changes']['status'] != 'none':
                        html += f'<div class="site-changed">'
                        html += f'<strong>üìù {report["site"]}</strong><br>'
                        html += f'URL: <a href="{report["url"]}">{report["url"]}</a><br>'
                        html += f'Status: Changements d√©tect√©s<br>'
                        html += '</div>'
        
        html += """
            <div class="footer">
                <p>G√©n√©r√© automatiquement par GitHub Actions<br>
                Prochaine v√©rification dans 12 heures</p>
            </div>
        </body>
        </html>
        """
        
        # Envoi
        message = MIMEMultipart()
        message["Subject"] = subject
        message["From"] = sender
        message["To"] = receiver
        message.attach(MIMEText(html, "html"))
        
        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender, password)
            server.sendmail(sender, receiver, message.as_string())
            server.quit()
            print(f"‚úÖ Email envoy√© √† {receiver}")
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
            exit(1)
        PYTHON
