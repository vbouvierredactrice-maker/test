name: Monitor SEO Multi-Sites

on:
  schedule:
    - cron: '0 8,20 * * *'
  workflow_dispatch:
    inputs:
      site_filter:
        description: 'Nom du site √† tester (vide = tous)'
        required: false
        default: ''
      force_alert:
        description: 'Forcer envoi email'
        required: false
        default: 'false'

env:
  EMAIL_USERNAME: 'vbouvier.redactrice@gmail.com'
  EMAIL_PASSWORD: 'avrf enpz otim qlnf'
  NOTIFICATION_EMAIL: 'vbouvier@cybercite.fr'

jobs:
  # [Garder toutes les sections setup et monitor identiques jusqu'√† notify]
  
  notify:
    name: üìß Notification
    needs: [setup, monitor]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      with:
        pattern: report-*
        path: reports/
    
    - name: Analyze and prepare notification
      id: analyze
      run: |
        echo "üìä Analyse des rapports..."
        
        TOTAL="${{ needs.setup.outputs.sites_count }}"
        FIRST_RUN=0
        WITH_CHANGES=0
        WITH_ERRORS=0
        NEEDS_EMAIL=false
        
        for report_dir in reports/report-*; do
          if [ -f "$report_dir/report.json" ]; then
            REPORT=$(cat "$report_dir/report.json")
            
            IS_FIRST=$(echo "$REPORT" | jq -r '.is_first_run')
            HAS_CHANGES=$(echo "$REPORT" | jq -r '.changes.has_changes')
            ROBOTS_ERROR=$(echo "$REPORT" | jq -r '.robots.status')
            SITEMAP_ERROR=$(echo "$REPORT" | jq -r '.sitemaps.status')
            
            if [ "$IS_FIRST" = "true" ]; then
              FIRST_RUN=$((FIRST_RUN + 1))
            elif [ "$HAS_CHANGES" = "true" ]; then
              WITH_CHANGES=$((WITH_CHANGES + 1))
              NEEDS_EMAIL=true
            fi
            
            if [ "$ROBOTS_ERROR" = "error" ] || [ "$SITEMAP_ERROR" = "error" ]; then
              WITH_ERRORS=$((WITH_ERRORS + 1))
              NEEDS_EMAIL=true
            fi
            
            if [ -f "$report_dir/changes.tar.gz" ]; then
              mkdir -p "all_changes/$(basename $report_dir)"
              tar -xzf "$report_dir/changes.tar.gz" -C "all_changes/$(basename $report_dir)"
            fi
          fi
        done
        
        if [ "${{ github.event.inputs.force_alert }}" = "true" ]; then
          NEEDS_EMAIL=true
        fi
        
        echo "first_run=$FIRST_RUN" >> $GITHUB_OUTPUT
        echo "with_changes=$WITH_CHANGES" >> $GITHUB_OUTPUT
        echo "with_errors=$WITH_ERRORS" >> $GITHUB_OUTPUT
        echo "needs_email=$NEEDS_EMAIL" >> $GITHUB_OUTPUT
        
        echo "# üìä Monitoring SEO - R√©sum√©" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Sites surveill√©s:** $TOTAL" >> $GITHUB_STEP_SUMMARY
        echo "- **Premi√®re v√©rification:** $FIRST_RUN" >> $GITHUB_STEP_SUMMARY
        echo "- **Avec changements:** $WITH_CHANGES" >> $GITHUB_STEP_SUMMARY
        echo "- **Avec erreurs:** $WITH_ERRORS" >> $GITHUB_STEP_SUMMARY
    
    - name: Send detailed email
      if: steps.analyze.outputs.needs_email == 'true'
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_RUN_ID: ${{ github.run_id }}
      run: |
        python3 << 'PYTHON'
        import smtplib
        import json
        import os
        from email.mime.text import MIMEText
        from email.mime.multipart import MIMEMultipart
        from datetime import datetime
        
        sender = "${{ env.EMAIL_USERNAME }}"
        password = "${{ env.EMAIL_PASSWORD }}"
        receiver = "${{ env.NOTIFICATION_EMAIL }}"
        
        total = int("${{ needs.setup.outputs.sites_count }}")
        first_run = int("${{ steps.analyze.outputs.first_run }}")
        with_changes = int("${{ steps.analyze.outputs.with_changes }}")
        with_errors = int("${{ steps.analyze.outputs.with_errors }}")
        
        if with_errors > 0:
            subject = f"üö® SEO Alert - {with_errors} erreur(s) / {total} sites"
        elif with_changes > 0:
            subject = f"üìù SEO Update - {with_changes} changement(s) / {total} sites"
        else:
            subject = f"‚úÖ SEO Check - {total} sites v√©rifi√©s"
        
        html = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; }}
                .header {{ background: #f8f9fa; padding: 20px; border-radius: 5px; }}
                .summary {{ background: #e9ecef; padding: 15px; margin: 20px 0; border-radius: 5px; }}
                .site {{ margin: 20px 0; padding: 15px; border-left: 4px solid #007bff; background: #f9f9f9; }}
                .site-error {{ border-left-color: #dc3545; background: #f8d7da; }}
                .site-changed {{ border-left-color: #ffc107; background: #fff3cd; }}
                .changes-detail {{ background: white; padding: 10px; margin: 10px 0; border-radius: 3px; font-family: monospace; font-size: 12px; }}
                .footer {{ margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d; font-size: 0.9em; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üìä Monitoring SEO Multi-Sites</h1>
                <p><strong>Date:</strong> {datetime.now().strftime("%d/%m/%Y %H:%M")}</p>
                <p><strong>Repository:</strong> {os.environ.get('GITHUB_REPOSITORY', 'N/A')}</p>
            </div>
            
            <div class="summary">
                <h2>R√©sum√©</h2>
                <ul>
                    <li><strong>Sites surveill√©s:</strong> {total}</li>
                    <li><strong>Premi√®re v√©rification:</strong> {first_run}</li>
                    <li><strong>Avec changements:</strong> {with_changes}</li>
                    <li><strong>Avec erreurs:</strong> {with_errors}</li>
                </ul>
            </div>
            
            <h2>D√©tails par site</h2>
        """
        
        for report_dir in os.listdir("reports"):
            if report_dir.startswith("report-"):
                report_path = os.path.join("reports", report_dir, "report.json")
                if os.path.exists(report_path):
                    with open(report_path) as f:
                        report = json.load(f)
                    
                    if report['is_first_run']:
                        continue
                    
                    if report['robots']['status'] == 'error' or report['sitemaps']['status'] == 'error':
                        site_class = 'site-error'
                        icon = '‚ùå'
                    elif report['changes']['has_changes']:
                        site_class = 'site-changed'
                        icon = 'üìù'
                    else:
                        continue
                    
                    html += f'<div class="{site_class}">'
                    html += f'<h3>{icon} {report["site"]}</h3>'
                    html += f'<p><strong>URL:</strong> <a href="{report["url"]}">{report["url"]}</a></p>'
                    
                    if report['robots']['status'] == 'error':
                        html += f'<p>‚ö†Ô∏è <strong>robots.txt:</strong> {report["robots"]["error"]}</p>'
                    
                    if report['sitemaps']['status'] == 'error':
                        html += f'<p>‚ö†Ô∏è <strong>sitemaps:</strong> {report["sitemaps"]["errors"]}</p>'
                    
                    if report['changes']['has_changes'] and report['changes']['details']:
                        html += '<div class="changes-detail">'
                        html += '<strong>Changements d√©tect√©s:</strong><br>'
                        
                        details = report['changes']['details']
                        for change in details.split(';'):
                            if change:
                                parts = change.split(':')
                                if len(parts) == 2:
                                    file_name = parts[0]
                                    change_info = parts[1]
                                    
                                    if 'modified' in change_info and '(' in change_info:
                                        nums = change_info[change_info.find('(')+1:change_info.find(')')].split('/')
                                        if len(nums) == 2:
                                            added = nums[0].replace('+', '')
                                            removed = nums[1].replace('-', '')
                                            
                                            if file_name == 'robots.txt':
                                                html += f'<br>üìÑ <strong>robots.txt:</strong> '
                                                html += f'{added} lignes ajout√©es, {removed} lignes supprim√©es'
                                            elif 'sitemap' in file_name:
                                                html += f'<br>üó∫Ô∏è <strong>{file_name}:</strong> '
                                                html += f'{added} URLs ajout√©es, {removed} URLs supprim√©es'
                        
                        html += '</div>'
                    
                    html += '</div>'
        
        html += f"""
            <div class="footer">
                <p>
                    <strong>Actions GitHub:</strong> 
                    <a href="https://github.com/{os.environ.get('GITHUB_REPOSITORY', '')}/actions/runs/{os.environ.get('GITHUB_RUN_ID', '')}">
                        Voir les d√©tails complets
                    </a>
                </p>
                <p>Prochaine v√©rification automatique dans 12 heures</p>
            </div>
        </body>
        </html>
        """
        
        message = MIMEMultipart()
        message["Subject"] = subject
        message["From"] = sender
        message["To"] = receiver
        message.attach(MIMEText(html, "html"))
        
        try:
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(sender, password)
            server.sendmail(sender, receiver, message.as_string())
            server.quit()
            print(f"‚úÖ Email envoy√© √† {receiver}")
            print(f"   Sujet: {subject}")
        except Exception as e:
            print(f"‚ùå Erreur envoi email: {e}")
            exit(1)
        PYTHON
